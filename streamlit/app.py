# Note that the OpenAI assistants library is in beta and subject to change
# This code was written for:
# Streamlit 1.35.0
# OpenAI 1.30.5

import streamlit as st
from asst_utils import Data_Assistant
import pandas as pd

default_file = "world_df.csv" # If none uploaded use this - make sure it is in the root directory!

# Create a data assistant object
data_assistant = Data_Assistant()

# Get a data (csv) file 
# The file can be uploaded with the Streamlit control, if none is uploaded
# the default file is returned
def get_local_file():
    with st.sidebar:
        st.subheader("Specifiy the file to upload")
        st.markdown("_If no file is specified the default will be used_")
        uploaded_file = st.file_uploader("Choose a file")

        if uploaded_file == None:
            uploaded_file = open(default_file, 'r')
        
        st.dataframe(pd.read_csv(uploaded_file))
    return uploaded_file

# Run the assistant with a file, a thread and a prompt
def execute(prompt, file, status_field):
    thread = data_assistant.create_thread(file, prompt) 
    
    if data_assistant.run_assistant_and_wait_for_result(assistant, thread, status_field=status_field, display_messages=False) == 'completed':
        # If things go wrong you might want to see the messages
        #messages = data_assistant.client.beta.threads.messages.list(thread_id=thread.id)
        #st.write(messages)

        # Get the image if it has been generated, otherwise display an unhelpful error message
        try:    
            image_data_bytes = data_assistant.get_generated_image()
            st.download_button(
                label="Download chart as png file",
                data=image_data_bytes,
                file_name="download.png",
                mime="image/png",
            )

            # If you want to save the file, do something like this...
            #with open("./my-image.png", "wb") as file:
            #    file.write(image_data_bytes)

            #Display the chart
            st.image(image_data_bytes)
        except:
            error_message = ("That chart cannot be created")
            return None, error_message

    else:
        return None, "An error occured - make sure your OpenAI account is in credit"    


### Main code starts here ###

st.header("Create a chart from your CSV data")
st.write("""Upload your CSV file from the sidebar and enter a new prompt, in English, 
         to generate a chart. Optionally, download the chart when complete.""")
st.markdown("_Errors may occur if your prompt is not understood by the system_")

prompt = st.text_input('Write a prompt:', value=data_assistant.prompt)
prompt_cols = st.columns(2)
with prompt_cols[1]:
    status_field = st.empty()
    status_field.write("Status: not running")

# Get a local file to upload to the assistant
uploaded_file = get_local_file()


# upload the file and retrieve the file object
file = data_assistant.upload_file_for_assistant(uploaded_file)
# Create assistant and thread
assistant = data_assistant.get_assistant(file)

if prompt_cols[0].button("Run this prompt"):
    image, error_message = execute(prompt, file, status_field=status_field)
    if image:
        # If you want to save the file, do something like this...
        #with open("./my-image.png", "wb") as file:
        #    file.write(image_data_bytes)

        #Display the chart
        st.image(image)
    else:
        st.error(error_message)

"---"
# The user can delete all assistant generated files here instead of one by one in the OpenAI dashboard 
delete_cols = st.columns(2)
delete_cols[0].warning("Pressing this button is DESTRUCTIVE - it will delete ALL files generated by an assistant, NOT just in this session - ALL of them")
if delete_cols[1].button("Delete files created by assistant"):
    data_assistant.delete_ALL_assistant_generated_files()